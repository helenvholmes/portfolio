{"componentChunkName":"component---src-templates-blog-post-js","path":"/writing/infinite-css-animations/","result":{"data":{"markdownRemark":{"id":"0de0ad6e-4f46-591d-a234-e61f7d352569","html":"<p>You may have seen my <a href=\"/writing/ampersand-conf\">other article about Ampersand Conference</a>, which really just goes to show that I learned a lot. In any case, <a href=\"http://trentwalton.com/\" target=\"_blank\">Trent Walton</a>’s talk on various CSS tricks was very informative and I wanted to try out some of the things he went over right away.</p>\n<h2>Icon Fonts</h2>\n<p>You’ve probably already heard all about how icon fonts are amazing, but what I hadn't understood was how to make one or how they worked. Turns how it’s fairly simple. Here’s how <a href=\"http://fontawesome.io/\" target=\"_blank\">Font Awesome</a>, an open-source icon font from Twitter, structures their font.</p>\n<p>First, they link up their files with the expected <code>@font-face</code> stuff:</p>\n<pre><code>@font-face {\n  font-family: 'FontAwesome';\n  src: url('@{fa-font-path}/fontawesome-webfont.eot?v=@{fa-version}');\n  src: url('@{fa-font-path}/fontawesome-webfont.eot?#iefix&#x26;v=@{fa-version}') format('embedded-opentype'), url('@{fa-font-path}/fontawesome-webfont.woff?v=@{fa-version}') format('woff'), url('@{fa-font-path}/fontawesome-webfont.ttf?v=@{fa-version}') format('truetype'), url('@{fa-font-path}/fontawesome-webfont.svg?v=@{fa-version}#fontawesomeregular') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n</code></pre>\n<p>The <code>.fa</code> class is where they make the font declaration:</p>\n<pre><code>.fa {\n  font-family: ’font-awesome’;\n}\n</code></pre>\n<p>Finally, a few of the icons themselves: </p>\n<pre><code>.fa-camera:before {\n  content: \"\\f030\";\n}\n\n.fa-headphones:before {\n  content: \"\\f025\";\n}\n\n.fa-search:before {\n  content: \"\\f002\";\n}\n</code></pre>\n<p>The logic here is that you can hide the weird, unicode strings that don't really map to anything in more semantic classes (e.g., <code>.fa-headphones</code>). Neat! Using this, we have a basis for our glowing lightning bolt.</p>\n<p>When I set out to make this, I knew I wanted it to glow forever, to use the icon font jazz I'd just learned about, and for it to me scalable. (If it's not scalable, what's the point). </p>\n<p>I decided to make the lightning bolt glow using Trent Walton's <a href=\"https://dl.dropboxusercontent.com/u/3648990/Ampersand-Demo/stroke.html\" target=\"_blank\">fake stroke effect</a>, which essentially is just a text-shadow on all sides of the bolt:</p>\n<pre><code>text-shadow: 5px 5px 10px darken($secondary-color,10%),\n            -5px -5px 10px darken($secondary-color,10%),\n             5px -4px 10px darken($secondary-color,10%),\n            -5px 5px 10px darken($secondary-color,10%);\n</code></pre>\n<p>To make the bolt scalable, I used percentages, although there's a hearty debate on what the best practice for setting type size is (check the comments in <a href=\"http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/\" target=\"_blank\">this blog post</a> for a taste). Seems like the verdict in 2013 is that pixels are global while ems and percentages are local. I went with percentages since the bolt is relative to the viewport anyway:</p>\n<pre><code>// Sizing\n$base-font: 3500%;\n</code></pre>\n<p>To then make our lightning bolt glow and pulse, we define the animation and then apply it:</p>\n<pre><code>@-webkit-keyframes pulse {\n// Fake stroke with text shadows code\n0% { text-shadow: 5px 5px 10px darken($secondary-color,10%),\n               -5px -5px 10px darken($secondary-color,10%),\n                5px -4px 10px darken($secondary-color,10%),\n               -5px 5px 10px darken($secondary-color,10%); }\n50% { text-shadow: none; }\n100% { text-shadow: 5px 5px 10px darken($secondary-color,10%),\n                 -5px -5px 10px darken($secondary-color,10%),\n                  5px -4px 10px darken($secondary-color,10%),\n                 -5px 5px 10px darken($secondary-color,10%); }\n}\n</code></pre>\n<p>Here's where I set the icon (<code>:after</code>) and then called the animation:</p>\n<pre><code>i {\n// Positioning\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-left: -0.25em;\nmargin-top: -0.51em;\n    &#x26;:after {\n        content: '\\f0e7';\n\n        // Position it\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n    }\n\n// Transitions\ntransition: text-shadow 0.7s ease;\n-webkit-transition: text-shadow 0.7s ease;\n\n// Handles the pulse\n-webkit-animation-name: pulse;\n-webkit-animation-duration: 1.2s;\n-webkit-transform-origin: 50% 50%;\n-webkit-animation-iteration-count: infinite;\n-webkit-animation-timing-function: linear;\n}\n</code></pre>\n<p>Obviously I don't have all of the browser prefixes in there, which you'd need if you were being serious about implementing something like this.</p>","frontmatter":{"date":"November 12, 2013","title":"Infinite CSS Animations","description":"Hello, hi","tags":["workplace-guides","css"]}}},"pageContext":{"id":"0de0ad6e-4f46-591d-a234-e61f7d352569"}},"staticQueryHashes":["3020398965"]}
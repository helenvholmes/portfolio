{"componentChunkName":"component---src-templates-blog-post-js","path":"/writing/the-future-of-css/","result":{"data":{"markdownRemark":{"id":"f0239d3e-6cbb-5454-afdb-1a4aca608fcc","html":"<p><a href=\"https://twitter.com/tabatkins\" target=\"_blank\">@tabatkins</a>, Tab Atkins. </p>\n<p><a href=\"http://www.xanthir.com/talks/2014-12-09/\" target=\"_blank\">Link to slides</a></p>\n<p><code>image()</code>: fallbacks to color and a <a href=\"http://dev.w3.org/csswg/css-images-3/\" target=\"_blank\">bunch of other things</a></p>\n<p><code>image-set()</code>: Lets you specify multiple resolutions of an image, i.e. for retina</p>\n<p><code>cross-fade</code>: smoothly tweet between two images.</p>\n<p><code>image-rendering</code>: Lets browser understand how it should scale up images. Crisp edges! Oh baby!</p>\n<p><code>flex-box()</code>: Hey, you should be <a href=\"http://dev.w3.org/csswg/css-flexbox/\" target=\"_blank\">using it already!</a> Basically, it destroys grids with all their terrible math. Yay!</p>\n<p><a href=\"http://gridbyexample.com/\" target=\"_blank\">Grid by Example</a>, Rachel Andrew\n<a href=\"http://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\">Grid</a>, CSS-Tricks \n<a href=\"https://philipwalton.github.io/solved-by-flexbox/\" target=\"_blank\">Solved by Flexbox</a>, Philip Walton\n<a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\">Flexbox</a>, CSS-Tricks</p>\n<p><code>:nth-child()</code>, <code>:matches()</code>: Selecting children is <a href=\"http://dev.w3.org/csswg/selectors/\" target=\"_blank\">getting smarter</a>.\n<p><em>Variables</em>: CSS will have them! They currently <a href=\"http://dev.w3.org/csswg/css-variables/\" target=\"_blank\">work in Firefox</a>.</p>\n<p><em>Colors</em>: <a href=\"http://dev.w3.org/csswg/css-color/\">Spec</a> There will be 4/8 fihiy hex colors for alpha instead of converting to <code>rgba</code>, and other fun stuff. </p>\n<p><code>hwb()</code>: hue-whiteness-blackness</p>\n<p><code>gray()</code>: grays without repeating yourself. Nice! No more bajillion <code>$brand-gray-light</code>s or whatever. \n<p><code>language-gray()</code>: grays without repeating yourself. Nice.</p>\n<p><em>Media Queries</em>: They're <a href=\"http://dev.w3.org/csswg/mediaqueries/\" target=\"_blank\">getting smarter!</a> Ability to target phones used as night, or in bright light, or on e-ink screens. <code>bada$$</code>, amirite???</p>\n<p><em>Animation!</em>: <a href=\"https://w3c.github.io/web-animations/\" target=\"_blank\">Web Animations spec</a>, <a href=\"http://dev.w3.org/FXTF/motion-1/\" target=\"_blank\">Motion Path</a>. Exposing CSS animations to JS in a more direct + easy way, and animations an element around the page in 2D with the <code>motion</code> property.</p>\n<p><em>Polyfilling CSS</em>: No language can grow forever. CSS is huge, and getting larger and larger. Cycle times to get new things into spec is really long (~5 years, yikes!). Doesn't mean we can't polyfill our solutions, though, such as with Media Queries, such as variables for media queries:</p>\n</code></pre>\n<pre><code>@custom-media foo (500px &#x26;lt;= width &#x26;lt;= 1200px);\n  @media (\"foo\") { ... }\n  CSS.customMedia.set(\"bar\", true);\n  CSS.customMedia.set(\"baz\", 500);\n  CSS.customMedia.set(\n        \"qux\",\n        MediaQueryList(\"(min-width: 500px)\"))\n  @media (\"bar\") { ... }\n  @media (\"baz\" &#x26;lt; 600) { ... }\n  @media (\"qux\") { ... }\n</code></pre>\n<p><em>More Polyfilling</em>: Custom psuedo-classes, custom functions, mix-ins (functions on the block level, rather than value level), custom at-rules, custom layout???</p>","frontmatter":{"date":"December 12, 2014","title":"The Future of CSS","description":"Tab Atkins","tags":["conferences"]}}},"pageContext":{"id":"f0239d3e-6cbb-5454-afdb-1a4aca608fcc"}},"staticQueryHashes":["3020398965"]}